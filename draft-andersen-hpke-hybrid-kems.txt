



Internet Engineering Task Force                         J. Andersen, Ed.
Internet-Draft                                               Google, LLC
Intended status: Informational                          28 February 2025
Expires: 1 September 2025


                          Hybrid KEMs for HPKE
                 draft-andersen-hpke-hybrid-kems-latest

Abstract

   This memo defines hybrid KEMs for use in Hybrid Public Key Encryption
   as defined in RFC 9180.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-andersen-hpke-hybrid-kems/.

   Discussion of this document takes place on the Crypto Forum Research
   Group mailing list (mailto:cfrg@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/search/?email_list=cfrg.  Subscribe
   at https://www.ietf.org/mailman/listinfo/cfrg/.

   Source for this draft and an issue tracker can be found at
   https://github.com/bluegate010/draft-andersen-hpke-hybrid-kems.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 1 September 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Introduction
     1.1.  Requirements Language
   2.  Hybrid KEMs for HPKE
     2.1.  Hybrid ECDH P-384 + ML-KEM-768 use in HPKE
   3.  IANA Considerations
   4.  Security Considerations
   5.  Normative References
   Appendix A.  Appendix 1
   Acknowledgements
   Contributors
   Author's Address

1.  Introduction

   [RFC9180] defines HPKE, a hybrid asymmetric encryption scheme built
   on KEMs, KDFs, and AEADs.

   [SP800277ipd] defines a generic KEM combiner for hybrid KEMs.

   This document defines bindings between hybrid KEMs as provided in
   [SP800277ipd] and HPKE as defined in [RFC9180].

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Hybrid KEMs for HPKE

2.1.  Hybrid ECDH P-384 + ML-KEM-768 use in HPKE

   Hybrid ECDH P-384 + ML-KEM-768 satisfies the HPKE KEM interface as
   follows.

   A helper function Combiner is given by

def Combiner(ss_ecc, ss_mlkem, ct_ecc, ct_mlkem, pk_ecc, pk_mlkem):
  ss = SHA2-512(ss_ecc || ss_mlkem || ct_ecc || ct_mlkem || pk_ecc || pk_mlkem || 0x0011 || 0x0041)

  return ss

   0x0011 and 0x0041 are the HPKE KEM identifiers for DHKEM(P-384, HKDF-
   SHA384) and ML-KEM-768, respectively. 0x0041 is proposed in
   [draft-connolly-cfrg-hpke-mlkem].

   SHA2-512 is a valid key combiner as given in [SP800277ipd].

   SerializePublicKey, SerializePrivateKey, and DeserializePrivateKey
   are the identity functions, as public and private keys are fixed-
   length byte strings which are concatenations of serialized ECDH keys
   as defined in [RFC9180] and ML-KEM keys as defined in [FIPS203].

   DeriveKeyPair is given by

def DeriveKeyPair(ikm):
  dkp_prk = HKDF-SHA512-Extract("", ikm)
  dkp_okm = HKDF-SHA512-Expand(dkp_prk, "ecdh-p384-ml-kem-768-dkp", 112)

  (pk_ecc, sk_ecc) = DHKEM(P-384).DeriveKeyPair(dkp_okm[0:48])
  (pk_mlkem, sk_mlkem) = ML-KEM-768.KeyGen_internal(dkp_okm[48:80], dkp_okm[80:112])

  return (pk_ecc || pk_mlkem, sk_ecc || sk_mlkem)

   DHKEM(P-384).DeriveKeyPair is defined in section 7.1.3 of [RFC9180].
   ML-KEM-768.KeyGen_internal is defined in [FIPS203].

   Encap is given by

   def Encap(pk):
     pk_ecc = pk[0:97]
     pk_mlkem = pk[97:1281]

     ss_ecc, ct_ecc = DHKEM(P-384, HKDF-SHA384).Encap(pk_ecc)
     ss_mlkem, ct_mlkem = ML-KEM-768.Encaps(pk_mlkem)

     ss = Combiner(ss_ecc, ss_mlkem, ct_ecc, ct_mlkem, pk_ecc, pk_mlkem)
     ct = ct_ecc || ct_mlkem

     return (ss, ct)

   DHKEM(P-384, HKDF-SHA384).Encap is defined in [RFC9180].  ML-KEM-
   768.Encaps is defined in [FIPS203].

   An ML-KEM encapsulation key check failure causes an HPKE EncapError.

   For testing, it is convenient to have a deterministic version of
   encapsulation.  An implementation of this hybrid scheme MAY provide
   the following derandomized function.

def EncapsulateDerand(pk, encaps_seed):
  pk_ecc = pk[0:97]
  pk_mlkem = pk[97:1281]
  seed_p384 = encaps_seed[0:48]
  seed_mlkem = encaps_seed[48:80]

  (ct_ecc_pub, ct_ecc) = DHKEM(P-384).DeriveKeyPair(seed_p384)

  ss_ecc = DHKEM(P-384).DH(ct_ecc, pk_ecc)
  (ss_mlkem, ct_mlkem) = ML-KEM-768.Encaps_internal(pk_mlkem, seed_mlkem)

  ss = Combiner(ss_ecc, ss_mlkem, ct_ecc, ct_mlkem, pk_ecc, pk_mlkem)
  ct = concat(ct_ecc, ct_mlkem)

  return (ss, ct)

   pk is a 1281 byte hybrid encapsulation key which is a concatenation
   of a serialized ECC public key and an ML-KEM public key. eseed MUST
   be 80 bytes.

   DHKEM(P-384).DH is the DH group function associated with P-384 as
   specified in [RFC9180].

   EncapsulateDerand returns the 64 byte shared secret ss and the 1185
   byte ciphertext ct.

   Decap is given by

   def Decap(ct, sk):
     sk_ecc = sk[0:48]
     sk_mlkem = sk[48:2448]

     ct_ecc = ct[0:97]
     ct_mlkem = ct[97:1185]

     ss_ecc = DHKEM(P-384, HKDF-SHA384).Decap(ct_ecc, sk_ecc)
     ss_mlkem = ML-KEM-768.Decaps(ct_mlkem, sk_mlkem)

     ss = Combiner(ss_ecc, ss_mlkem, ct_ecc, ct_mlkem, pk_ecc, pk_mlkem)

     return ss

   DHKEM(P-384, HKDF-SHA384).Decap is defined in [RFC9180].  ML-KEM-
   768.Decaps is defined in [FIPS203].

   As defined here, this hybrid scheme is not an authenticated KEM: it
   does not support AuthEncap and AuthDecap.

   Nsecret, Nenc, Npk, and Nsk are defined in Section 3.

3.  IANA Considerations

   This document requests/registers the following entries to the "HPKE
   KEM Identifiers" registry.

   Value: 384 + 768 = 1152 = 0x0480 (please)

   KEM: ECDH P-384 + ML-KEM-768

   Nsecret: 64

   Nenc: 1185

   Npk: 1281

   Nsk: 112

   Auth: no

   Reference: This document

4.  Security Considerations

   Informally, these KEMs are secure if [SP800277ipd] and [FIPS203] are
   secure.  This is taken as given.

5.  Normative References

   [RFC9180]  Barnes, R., Bhargavan, K., Lipp, B., and C. Wood, "Hybrid
              Public Key Encryption", RFC 9180, DOI 10.17487/RFC9180,
              February 2022, <https://www.rfc-editor.org/rfc/rfc9180>.

   [SP800277ipd]
              Alagic, G., Barker, E., Chen, L., Moody, D., Robinson, A.,
              Silberg, H., and N. Waller, "NIST SP 800-227 (Initial
              Public Draft) - Recommendations for Key-Encapsulation
              Mechanisms", n.d..

   [FIPS203]  "FIPS 203 - Module-Lattice-Based Key-Encapsulation
              Mechanism Standard", n.d..

   [draft-connolly-cfrg-hpke-mlkem]
              "ML-KEM for HPKE", n.d.,
              <https://datatracker.ietf.org/doc/draft-connolly-cfrg-
              hpke-mlkem>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Appendix A.  Appendix 1

   This becomes an Appendix

Acknowledgements

Contributors

   Chris Fenner
   Google, LLC
   Email: cfenn@google.com


   Jordan Hand
   Google, LLC
   Email: jhand@google.com


Author's Address

   Jeff Andersen (editor)
   Google, LLC
   United States of America
   Email: jeffandersen@google.com
